import numpy as np
import tensorflow as tf
import cv2
import base64


#convert image file to base 64 string


#convert image to base 64
def base64ToImage(img_base64):
    img_data = base64.b64decode(img_base64)
    nparr = np.fromstring(img_data, np.float32)
    print(nparr.dtype)
    img_np = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    #img_300 = cv2.resize(img_np, (300, 300))
    img_last = np.expand_dims(img_np, axis=0).astype('float32')
    
    print(img_last.dtype)
    print(img_last.shape)
    print(img_last)
    
    return img_last
    

    
img_base64 = ""


# Load the TFLite model and allocate tensors.
interpreter = tf.lite.Interpreter(model_path="model/LymeMobileQuantZhangKoduru.tflite")
interpreter.allocate_tensors()

# Get input and output tensors.
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

print(input_details)
print(output_details)

# Test the model on random input data.
input_shape = input_details[0]['shape']
print(input_shape)
#input_data = np.array(np.random.random_sample(input_shape), dtype=np.float32)
input_data = base64ToImage(img_base64)
interpreter.set_tensor(input_details[0]['index'], input_data)

interpreter.invoke()

# The function `get_tensor()` returns a copy of the tensor data.
# Use `tensor()` in order to get a pointer to the tensor.
output_data = interpreter.get_tensor(output_details[0]['index'])
print(type(output_data))
print(output_data.shape)